// <auto-generated />
using System;
using ApiFront;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiFront.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241024082413_hospitalschool")]
    partial class hospitalschool
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiFront.Models.Doctor_Pations", b =>
                {
                    b.Property<int>("Pationid")
                        .HasColumnType("int");

                    b.Property<int>("Dcotorid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pationid", "Dcotorid");

                    b.HasIndex("Dcotorid");

                    b.ToTable("Doctor_Pations");
                });

            modelBuilder.Entity("ApiFront.Models.Doctors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("Manangerid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ApiFront.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("ApiFront.Models.Patients", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateOnly>("Appointment")
                        .HasColumnType("date");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ApiFront.Models.Doctor_Pations", b =>
                {
                    b.HasOne("ApiFront.Models.Doctors", "Doctor")
                        .WithMany("Doctor_Pations")
                        .HasForeignKey("Dcotorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiFront.Models.Patients", "Patient")
                        .WithMany("Doctor_Pations")
                        .HasForeignKey("Pationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ApiFront.Models.Doctors", b =>
                {
                    b.HasOne("ApiFront.Models.Manager", "Manager")
                        .WithMany("Doctors")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ApiFront.Models.Doctors", b =>
                {
                    b.Navigation("Doctor_Pations");
                });

            modelBuilder.Entity("ApiFront.Models.Manager", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ApiFront.Models.Patients", b =>
                {
                    b.Navigation("Doctor_Pations");
                });
#pragma warning restore 612, 618
        }
    }
}
